{"mappings":"AAEI,IAAIA,eAAiB,SAASC,EAAGC,EAAMC,GACnC,IAAIC,EAAkB,qBAC0B,OAA7CD,EAAOE,aAAa,uBACnBD,EAAkBD,EAAOE,aAAa,sBAG1CF,EAAOG,UAAUC,IAAI,YAErB,IAAIC,EAAIC,KAAKC,IAAIR,EAAKS,wBAAwBH,EAAIP,EAAEW,SAEhDC,EAAIJ,KAAKC,IAAIR,EAAKS,wBAAwBE,EAAIZ,EAAEa,SAGhDC,EAAab,EAAKS,wBAAwBK,MAAQ,EAClDC,EAAaf,EAAKS,wBAAwBO,OAAS,EAInDC,GAAcX,EAAIO,GAAa,EAC/BK,GAAcP,EAAII,GAAc,GAEhCI,EAAmC,KAA7B,EAAKb,GAAiB,EAAZO,IAChBO,EAAoC,KAA9B,EAAKT,GAAkB,EAAbI,IAEpBf,EAAKqB,cAAc,UAAUC,MAAMC,WAAa,6BAA6BJ,MAAOC,qCAEpFnB,EAAOqB,MAAME,YAA6B,EAAZX,EAAH,KAC3Bb,EAAKsB,MAAME,YAA6B,EAAZX,EAAH,KAGzBb,EAAKsB,MAAMG,UAAY,WAAWR,kBAA2BC,oBAGP,OAAnDjB,EAAOE,aAAa,6BACnBF,EAAOqB,MAAME,YAAc,GAAGvB,EAAOE,aAAa,8BAItD,IAAIuB,GAAepB,EAAIO,GAAa,EAChCc,GAAehB,EAAII,GAAc,EAGrCf,EAAKsB,MAAMM,OAAS,gBAAgBF,QAAkBC,YAAsBzB,IAChF,EAEA2B,SAASC,iBAAiB,SAASC,SAAQ,SAAS/B,GAChDA,EAAKgC,iBAAiB,cAAc,SAASjC,GACzCD,eAAeC,EAAGkC,KAAKZ,cAAc,eAAgBY,KACzD,IAEAjC,EAAKgC,iBAAiB,aAAa,SAASjC,GACxCD,eAAeC,EAAGkC,KAAKZ,cAAc,eAAgBY,KACzD,IAEAjC,EAAKgC,iBAAiB,cAAc,SAASjC,GACzC,IAAIG,EAAkB,qBACwB,OAA3CF,EAAKG,aAAa,uBACjBD,EAAkBF,EAAKG,aAAa,sBAExCH,EAAKI,UAAU8B,OAAO,YACtBlC,EAAKqB,cAAc,eAAeC,MAAMG,UAAY,uCAEpDzB,EAAKqB,cAAc,eAAeC,MAAMM,OAAS,2BAA2B1B,IAChF,GACJ","sources":["src/about.js"],"sourcesContent":["\r\n\r\n    let calculateAngle = function(e, item, parent) {\r\n        let dropShadowColor = `rgba(0, 0, 0, 0.3)`\r\n        if(parent.getAttribute('data-filter-color') !== null) {\r\n            dropShadowColor = parent.getAttribute('data-filter-color');\r\n        }\r\n\r\n        parent.classList.add('animated');\r\n        // Get the x position of the users mouse, relative to the button itself\r\n        let x = Math.abs(item.getBoundingClientRect().x - e.clientX);\r\n        // Get the y position relative to the button\r\n        let y = Math.abs(item.getBoundingClientRect().y - e.clientY);\r\n\r\n        // Calculate half the width and height\r\n        let halfWidth  = item.getBoundingClientRect().width / 2;\r\n        let halfHeight = item.getBoundingClientRect().height / 2;\r\n\r\n        // Use this to create an angle. I have divided by 6 and 4 respectively so the effect looks good.\r\n        // Changing these numbers will change the depth of the effect.\r\n        let calcAngleX = (x - halfWidth) / 6;\r\n        let calcAngleY = (y - halfHeight) / 14;\r\n      \r\n        let gX = (1 - (x / (halfWidth * 2))) * 100;\r\n        let gY = (1 - (y / (halfHeight * 2))) * 100;\r\n      \r\n        item.querySelector('.glare').style.background = `radial-gradient(circle at ${gX}% ${gY}%, rgb(199 198 243), transparent)`;\r\n        // And set its container's perspective.\r\n        parent.style.perspective = `${halfWidth * 6}px`\r\n        item.style.perspective = `${halfWidth * 6}px`\r\n\r\n        // Set the items transform CSS property\r\n        item.style.transform = `rotateY(${calcAngleX}deg) rotateX(${-calcAngleY}deg) scale(1.04)`;\r\n        \r\n      \r\n        if(parent.getAttribute('data-custom-perspective') !== null) {\r\n            parent.style.perspective = `${parent.getAttribute('data-custom-perspective')}`\r\n        }\r\n\r\n        // Reapply this to the shadow, with different dividers\r\n        let calcShadowX = (x - halfWidth) / 3;\r\n        let calcShadowY = (y - halfHeight) / 6;\r\n        \r\n        // Add a filter shadow - this is more performant to animate than a regular box shadow.\r\n        item.style.filter = `drop-shadow(${-calcShadowX}px ${-calcShadowY}px 15px ${dropShadowColor})`;\r\n    }\r\n\r\n    document.querySelectorAll('.card').forEach(function(item) {\r\n        item.addEventListener('mouseenter', function(e) {\r\n            calculateAngle(e, this.querySelector('.inner-card'), this);\r\n        });\r\n\r\n        item.addEventListener('mousemove', function(e) {\r\n            calculateAngle(e, this.querySelector('.inner-card'), this);\r\n        });\r\n\r\n        item.addEventListener('mouseleave', function(e) {\r\n            let dropShadowColor = `rgba(0, 0, 0, 0.3)`\r\n            if(item.getAttribute('data-filter-color') !== null) {\r\n                dropShadowColor = item.getAttribute('data-filter-color')\r\n            }\r\n            item.classList.remove('animated');\r\n            item.querySelector('.inner-card').style.transform = `rotateY(0deg) rotateX(0deg) scale(1)`;\r\n            \r\n            item.querySelector('.inner-card').style.filter = `drop-shadow(0 10px 15px ${dropShadowColor})`;\r\n        });\r\n    })\r\n"],"names":["calculateAngle","e","item","parent","dropShadowColor","getAttribute","classList","add","x","Math","abs","getBoundingClientRect","clientX","y","clientY","halfWidth","width","halfHeight","height","calcAngleX","calcAngleY","gX","gY","querySelector","style","background","perspective","transform","calcShadowX","calcShadowY","filter","document","querySelectorAll","forEach","addEventListener","this","remove"],"version":3,"file":"about.b0f8aec7.js.map"}